// Generated by CoffeeScript 1.3.3
var conceptSelector, findData, loadExists, loadRename, parseConcept, rename, sendConditionBox, toName, toPath;

$(document).ready(function() {
  conceptSelector();
  $("#add input").click(function() {
    return sendConditionBox();
  });
  $("#pathList").append("ehr./name/value,Patient Name\nehr./composer/value,Composer\nehr./context/start_time,Context\n");
  $(".submit").click(function() {
    return submit(this);
  });
  validate();
  loadExists();
  return loadRename();
});

/*
  * #concept要素にADL名一覧を展開
*/


conceptSelector = function() {
  return $.ajax({
    type: "GET",
    url: "http://wako3.u-aizu.ac.jp:8080/service/adl/",
    dataType: "json",
    success: function(json) {
      var adlList, arr, value, _i, _len;
      arr = Array.prototype.slice.apply(json.adl);
      adlList = arr.sort();
      for (_i = 0, _len = adlList.length; _i < _len; _i++) {
        value = adlList[_i];
        $("#concept").append($("<option>").val(value).text(value));
      }
      return $("#concept").change(function() {
        return $.ajax({
          type: "GET",
          url: "http://wako3.u-aizu.ac.jp:8080/service/concept/" + $("#concept").val(),
          dataType: "json",
          success: function(adl) {
            $("#concept").attr("disabled", "disabled");
            parseConcept(adl);
            loadExists();
            return loadRename();
          },
          error: function() {
            alert("XML Not Found");
            return document.location = document.location;
          }
        });
      });
    }
  });
};

/*
  * Conceptを展開してテーブルに表示
*/


parseConcept = function(json) {
  var adl, adlList, c, concept, file, k, list, name, temp, title, v, x, _i, _len;
  adlList = {};
  for (file in json) {
    adl = json[file];
    temp = {};
    for (k in adl) {
      v = adl[k];
      if (k !== "name") {
        temp[k] = v;
      }
    }
    adlList[adl.name] = temp;
  }
  for (name in adlList) {
    list = adlList[name];
    title = $("<h3>").append($("<input>").attr("type", "checkbox").attr("class", "selection").attr("aqbe:path", name)).append(name);
    $("#find").append(title).append($("<table>").attr("class", "adl table table-bordered").attr("aqbe_adl_name", name));
    for (k in list) {
      v = list[k];
      $("[aqbe_adl_name=" + name + "]").append("<tr><th colspan=\"2\">" + k + "</th></tr>");
      concept = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = v.length; _i < _len; _i++) {
          x = v[_i];
          _results.push(conceptBuilder(x, name));
        }
        return _results;
      })();
      for (_i = 0, _len = concept.length; _i < _len; _i++) {
        c = concept[_i];
        $("[aqbe_adl_name=" + name + "]").append(c.getHtml());
      }
    }
  }
  return validate();
};

sendConditionBox = function() {
  var calStr, cb, conStr, condition, empty, name, path, pathUnit, sec, str, t, table, tbody, td1, td2, text, unit, unitStr, value, _i, _len, _ref;
  text = $("#stack").text().split("\n");
  empty = "";
  $("#result").empty();
  table = $("<table>").attr("class", "adl table table-bordered");
  table.append($("<tr>").append($("<th>").text("Object")).append($("<th>").text("Condition")));
  tbody = $("<tbody>").attr("id", "sortable");
  for (_i = 0, _len = text.length; _i < _len; _i++) {
    t = text[_i];
    if (t != null) {
      _ref = t.split(","), name = _ref[0], path = _ref[1], condition = _ref[2], conStr = _ref[3], value = _ref[4], unit = _ref[5], unitStr = _ref[6], pathUnit = _ref[7], calStr = _ref[8];
      if (name !== "") {
        str = "" + name + " " + conStr + " " + (calStr !== "undefined" ? calStr : value) + " " + (unitStr !== "undefined" ? unitStr : empty);
        sec = $("<input>").attr("type", "hidden").attr("class", "cb_1").val(t);
        cb = $("<select>").attr("class", "cb_2").append($("<option>").val("AND").text("AND")).append($("<option>").val("OR").text("OR"));
        td1 = $("<td>").append(str).append(sec);
        td2 = $("<td>").append(cb);
        tbody.append($("<tr>").append(td1).append(td2));
      }
    }
  }
  $("#result").append(table.append(tbody)).append($("<br>"));
  $("#sortable").sortable();
  $("#find").hide();
  $("#concept_box").hide();
  $("#result").show("fast");
  $("#add input").unbind().click(function() {
    return findData();
  });
  $("#back").show();
  $("#back input").unbind();
  return $("#back input").click(function() {
    $("#add input").unbind().click(function() {
      return sendConditionBox();
    });
    $("#add").show();
    $("#result").hide();
    $("#find").show("fast");
    $("#concept_box").show();
    $("#back").hide();
    return $("#result").empty();
  });
};

findData = function() {
  var andor, array, c, calStr, cnt, con, conStr, condition, conv, data, i, json, name, o, o1, o2, path, pathUnit, query, request, s, selection, t, t1, t2, table, temp, unit, unitStr, v, value, w, w_name, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _n, _ref, _ref1, _ref2, _ref3, _ref4;
  if ($("#stack").val() === "") {
    json = {};
  } else {
    con = [];
    andor = [];
    cnt = 0;
    _ref = $(".cb_1");
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      o = _ref[_i];
      con[cnt++] = $(o).val();
    }
    cnt = 0;
    _ref1 = $(".cb_2");
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      o = _ref1[_j];
      andor[cnt++] = $(o).val();
    }
    array = [];
    for (i = _k = _ref2 = cnt - 1; _ref2 <= 0 ? _k <= 0 : _k >= 0; i = _ref2 <= 0 ? ++_k : --_k) {
      _ref3 = con[i].split(","), name = _ref3[0], path = _ref3[1], condition = _ref3[2], conStr = _ref3[3], value = _ref3[4], unit = _ref3[5], unitStr = _ref3[6], pathUnit = _ref3[7], calStr = _ref3[8];
      switch (parseInt(condition)) {
        case 1:
          conv = "$ne";
          break;
        case 2:
          conv = "$gt";
          break;
        case 3:
          conv = "$lt";
          break;
        case 4:
          conv = "$gte";
          break;
        case 5:
          conv = "$lte";
      }
      if (path === "$exists") {
        t1 = {};
        t1[path] = true;
        t2 = {};
        t2[toPath(value)] = t1;
        array[0] = t2;
      } else if (unit === "undefined") {
        v = !isNaN(value) ? parseInt(value) : value;
        temp = {};
        temp[path] = v;
        if (conv != null) {
          t1 = {};
          t1[conv] = temp[path];
          t2 = {};
          t2[path] = t1;
          array[0] = t2;
        } else {
          array[0] = temp;
        }
      } else {
        o1 = {};
        o1[path] = parseFloat(value);
        o2 = {};
        o2[pathUnit] = unit;
        if (conv != null) {
          t1 = {};
          t1[conv] = o1[path];
          t2 = {};
          t2[path] = t1;
          temp = {};
          temp["$and"] = [t2, o2];
        } else {
          temp = {};
          temp["$and"] = [o1, o2];
        }
        array[0] = temp;
      }
      c = andor[i] === "OR" ? "$or" : "$and";
      json = {};
      json[c] = array;
      array = [];
      array[1] = json;
    }
    json = array[1];
  }
  array = [];
  i = 0;
  array[i++] = json;
  _ref4 = $(".adl");
  for (_l = 0, _len2 = _ref4.length; _l < _len2; _l++) {
    w = _ref4[_l];
    w_name = $(w).attr("aqbe_adl_name");
    if (w_name != null) {
      temp = {};
      temp[w_name] = {
        "$exists": true
      };
      array[i++] = temp;
    }
  }
  json = {
    "$and": array
  };
  selection = {
    "_id": 0
  };
  table = $("#find table, #find h3");
  data = {};
  for (_m = 0, _len3 = table.length; _m < _len3; _m++) {
    t = table[_m];
    data = $(".selection", t);
    for (_n = 0, _len4 = data.length; _n < _len4; _n++) {
      s = data[_n];
      if ($(s).attr("checked") === "checked") {
        selection[$(s).attr("aqbe:path")] = 1;
      }
    }
  }
  request = {};
  request["condition"] = json;
  request["selection"] = selection;
  query = "db.docs.find(" + (JSON.stringify(request.condition)) + ", " + (JSON.stringify(request.selection)) + ")";
  $("#result").empty().append($("<textarea>").text(query).attr("rows", "1").attr("cols", "1")).append("<br />");
  return $.ajax({
    type: "POST",
    url: "http://wako3.u-aizu.ac.jp:8080/service/find",
    contentType: "text/json",
    data: JSON.stringify(request),
    success: function(response) {
      var b_name, date, key, obj, result, _len5, _o, _ref5;
      $("#result").hide();
      $("#result").append($("<p>").text("Result => " + response.result.length + " patients"));
      _ref5 = response.result;
      for (_o = 0, _len5 = _ref5.length; _o < _len5; _o++) {
        result = _ref5[_o];
        table = $("<table>").attr("class", "adl table table-bordered");
        for (key in result) {
          obj = result[key];
          if (key !== "ehr") {
            table.append($("<tr>").append($("<th>").attr("colspan", 2).append(key)));
          }
          for (path in obj) {
            value = obj[path];
            if (parseInt(value) >= 315504000000) {
              date = new Date(parseInt(value));
              value = date.getFullYear() + "/" + date.getMonth() + "/" + date.getDate() + " " + date.getHours() + ":" + date.getMinutes() + ":" + date.getSeconds();
            }
            if (toName("" + key + "." + path) != null) {
              b_name = toName("" + key + "." + path);
              console.log(rename(b_name));
              table.append($("<tr>").append($("<td>").append(rename(b_name))).append($("<td>").append(value)));
            }
          }
        }
        $("#result").append(table).append($("<br>"));
      }
      $("#result").show("fast");
      return $("#add").hide();
    },
    error: function() {
      return alert("Bad Request");
    }
  });
};

toName = function(path) {
  var a, attr, b, pathList, text, _i, _len, _ref;
  text = $("#pathList").text().split("\n");
  pathList = {};
  for (_i = 0, _len = text.length; _i < _len; _i++) {
    attr = text[_i];
    _ref = attr.split(","), a = _ref[0], b = _ref[1];
    pathList[a] = b;
  }
  return pathList[path];
};

toPath = function(name) {
  var a, attr, b, pathList, text, _i, _len, _ref;
  text = $("#pathList").text().split("\n");
  pathList = {};
  for (_i = 0, _len = text.length; _i < _len; _i++) {
    attr = text[_i];
    _ref = attr.split(","), a = _ref[0], b = _ref[1];
    pathList[b] = a;
  }
  return pathList[name];
};

loadExists = function() {
  var text, v, w, x, _i, _len, _ref, _results;
  $("#exists").empty().append("<option value=\"\">Please Select</option>");
  text = $("#pathList").text().split("\n");
  _results = [];
  for (_i = 0, _len = text.length; _i < _len; _i++) {
    x = text[_i];
    if (x !== "") {
      _ref = x.split(","), w = _ref[0], v = _ref[1];
      _results.push($("#exists").append($("<option>").val(v).text(v)));
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};

loadRename = function() {
  var text, v, w, x, _i, _len, _ref;
  $("#rename").empty().append("<option value=\"\">Please Select</option>");
  text = $("#pathList").text().split("\n");
  for (_i = 0, _len = text.length; _i < _len; _i++) {
    x = text[_i];
    if (x !== "") {
      _ref = x.split(","), w = _ref[0], v = _ref[1];
      $("#rename").append($("<option>").val(v).text(v));
    }
  }
  return $("#rename").change(function() {
    $("#rename").next("input").removeAttr("disabled").attr("placeholder", $("#rename").val());
    return $("#rename").next("input").next("input").unbind().click(function() {
      var remover, str, value;
      value = $("#rename").next("input").val();
      str = "" + ($("#rename").val()) + "," + value;
      $("#renameList").append("" + str + "\n");
      remover = $("<input>").attr("type", "button").attr("class", "remover btn btn-mini").val("x");
      remover.click(function() {
        var flag, _j, _len1, _ref1, _results;
        remover.parent("p").remove();
        text = $("#renameList").text();
        $("#renameList").empty();
        flag = true;
        _ref1 = text.split("\n");
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          x = _ref1[_j];
          if (x === str && flag) {
            _results.push(flag = false);
          } else {
            _results.push($("#renameList").append("" + x + "\n"));
          }
        }
        return _results;
      });
      $("#rename").parent("td").append($("<p>").text("" + ($("#rename").val()) + " => " + value).append(remover));
      $("#rename").val("");
      return $("#rename").next("input").attr("disabled", "disabled").removeAttr("placeholder").val("");
    });
  });
};

rename = function(name) {
  var a, attr, b, renameList, text, _i, _len, _ref;
  text = $("#renameList").text().split("\n");
  renameList = {};
  for (_i = 0, _len = text.length; _i < _len; _i++) {
    attr = text[_i];
    _ref = attr.split(","), a = _ref[0], b = _ref[1];
    renameList[a] = b;
  }
  if (renameList[name] != null) {
    return renameList[name];
  } else {
    return name;
  }
};
