// Generated by CoffeeScript 1.3.3
var Concept, DvAny, DvBoolean, DvCluster, DvCodedText, DvCount, DvDateTime, DvInterval, DvMultiMedia, DvMultipleElements, DvOrdinal, DvProportion, DvQuantity, DvText, DvUri, conceptBuilder,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

conceptBuilder = function(json) {
  switch (json.dataType) {
    case "DvQuantity":
      return new DvQuantity(json);
    case "DV_CODED_TEXT":
      return new DvCodedText(json);
    case "DV_BOOLEAN":
      return new DvBoolean(json);
    case "DV_TEXT":
      return new DvText(json);
    case "DV_COUNT":
      return new DvCount(json);
    case "DvOrdinal":
      return new DvOrdinal(json);
    case "DV_MULTIMEDIA":
      return new DvMultiMedia(json);
    case "DV_DATE_TIME":
      return new DvDateTime(json);
    case "DV_INTERVAL":
      return new DvInterval(json);
    case "DV_PROPORTION":
      return new DvProportion(json);
    case "DV_URI":
      return new DvUri(json);
    case "DvMultipleElements":
      return new DvMultipleElements(json);
    case "DvCluster":
      return new DvCluster(json);
    default:
      return new DvAny(json);
  }
};

Concept = (function() {

  function Concept(json) {
    this.name = json.name;
    this.path = json.path.replace(/\./g, "___");
    this.type = json.dataType;
  }

  Concept.prototype.inputBuilder = function(placeholder) {
    if (placeholder == null) {
      placeholder = "";
    }
    return $("<input>").attr("type", "text").attr("value", "").attr("aqbe:path", this.path).attr("aqbe:type", this.type).attr("placeholder", placeholder);
  };

  Concept.prototype.calenderBuilder = function() {
    return this.inputBuilder().attr("id", "fieldDate");
  };

  Concept.prototype.selectBuilder = function(path, type, require) {
    var selecter;
    if (path == null) {
      path = this.path;
    }
    if (type == null) {
      type = this.type;
    }
    if (require == null) {
      require = false;
    }
    selecter = $("<select>").attr("aqbe:path", path).attr("aqbe:type", type);
    if (require) {
      return selecter;
    } else {
      return selecter.append("<option value=\"\">Please Select</option>");
    }
  };

  Concept.prototype.getHtml = function() {
    return $("<tr>").append($("<td>").text(this.name));
  };

  return Concept;

})();

DvQuantity = (function(_super) {

  __extends(DvQuantity, _super);

  function DvQuantity(json) {
    DvQuantity.__super__.constructor.call(this, json);
    this.path = this.path + "/magnitude";
    this.unitPath = this.path.replace("/magnitude", "/units");
    this.min = json.min[0] != null ? json.min : [-999999];
    this.max = json.max[0] != null ? json.max : [999999];
    this.unit = json.unit;
  }

  DvQuantity.prototype.getHtml = function() {
    var input, k, path, require, type, unitSelecter, v, _i, _len, _ref,
      _this = this;
    input = this.inputBuilder("0.0").attr("aqbe:min", this.min[0]).attr("aqbe:max", this.max[0]);
    unitSelecter = this.selectBuilder(path = this.unitPath, type = "DvQuantityUnit", require = true);
    _ref = this.unit;
    for (v = _i = 0, _len = _ref.length; _i < _len; v = ++_i) {
      k = _ref[v];
      unitSelecter.append("<option value=\"" + v + "\">" + k + "</option>");
    }
    unitSelecter.change(function() {
      var index;
      index = unitSelecter.val();
      return $(input).attr("aqbe:min", _this.min[index]).attr("aqbe:max", _this.max[index]);
    });
    return DvQuantity.__super__.getHtml.apply(this, arguments).append($("<td>").append(input).append(" ").append(unitSelecter).append("<span class=\"error\">"));
  };

  return DvQuantity;

})(Concept);

DvCodedText = (function(_super) {

  __extends(DvCodedText, _super);

  function DvCodedText(json) {
    DvCodedText.__super__.constructor.call(this, json);
    this.codeList = json.codeList;
  }

  DvCodedText.prototype.getHtml = function() {
    var code, select, _i, _len, _ref;
    select = this.selectBuilder();
    _ref = this.codeList;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      code = _ref[_i];
      select.append("<option value=\"" + code + "\">" + code + "</option>");
    }
    return DvCodedText.__super__.getHtml.apply(this, arguments).append($("<td>").append(select));
  };

  return DvCodedText;

})(Concept);

DvBoolean = (function(_super) {

  __extends(DvBoolean, _super);

  function DvBoolean(json) {
    DvBoolean.__super__.constructor.call(this, json);
  }

  DvBoolean.prototype.getHtml = function() {
    return DvBoolean.__super__.getHtml.apply(this, arguments).append($("<td>").append(this.selectBuilder().append("<option value=\"true\">true</option>").append("<option value=\"false\">false</option>")));
  };

  return DvBoolean;

})(Concept);

DvText = (function(_super) {

  __extends(DvText, _super);

  function DvText(json) {
    DvText.__super__.constructor.call(this, json);
  }

  DvText.prototype.getHtml = function() {
    return DvText.__super__.getHtml.apply(this, arguments).append($("<td>").append(this.inputBuilder("Freetext")));
  };

  return DvText;

})(Concept);

DvCount = (function(_super) {

  __extends(DvCount, _super);

  function DvCount(json) {
    DvCount.__super__.constructor.call(this, json);
    this.min = json.min != null ? json.min : -999999;
    this.max = json.max != null ? json.max : 999999;
  }

  DvCount.prototype.getHtml = function() {
    return DvCount.__super__.getHtml.apply(this, arguments).append($("<td>").append(this.inputBuilder("0").attr("aqbe:min", this.min).attr("aqbe:max", this.max)).append("<span class=\"error\">"));
  };

  return DvCount;

})(Concept);

DvOrdinal = (function(_super) {

  __extends(DvOrdinal, _super);

  function DvOrdinal(json) {
    DvOrdinal.__super__.constructor.call(this, json);
    this.codeList = json.codeList;
  }

  DvOrdinal.prototype.getHtml = function() {
    var c, select, _i, _len, _ref;
    select = this.selectBuilder();
    _ref = this.codeList;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      c = _ref[_i];
      select.append("<option value=\"" + c._1 + "\">" + c._2 + "</option>");
    }
    return DvOrdinal.__super__.getHtml.apply(this, arguments).append($("<td>").append(select));
  };

  return DvOrdinal;

})(Concept);

DvMultiMedia = (function(_super) {

  __extends(DvMultiMedia, _super);

  function DvMultiMedia(json) {
    DvMultiMedia.__super__.constructor.call(this, json);
    this.codeList = json.codeList;
  }

  DvMultiMedia.prototype.getHtml = function() {
    var c, select, _i, _len, _ref;
    select = this.selectBuilder();
    _ref = this.codeList;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      c = _ref[_i];
      select.append("<option value=\"" + c + "\">" + c + "</option>");
    }
    return DvMultiMedia.__super__.getHtml.apply(this, arguments).append($("<td>").append(select));
  };

  return DvMultiMedia;

})(Concept);

DvDateTime = (function(_super) {

  __extends(DvDateTime, _super);

  function DvDateTime(json) {
    DvDateTime.__super__.constructor.call(this, json);
  }

  DvDateTime.prototype.getHtml = function() {
    return DvDateTime.__super__.getHtml.apply(this, arguments).append($("<td>").append(this.calenderBuilder("Date Time")).append("<input type=\"hidden\" value=\"\" aqbe:type=\"DvDateTimeInteger\" aqbe:path=" + this.path + " />"));
  };

  return DvDateTime;

})(Concept);

DvInterval = (function(_super) {

  __extends(DvInterval, _super);

  function DvInterval(json) {
    DvInterval.__super__.constructor.call(this, json);
    this.interval = json.interval;
  }

  DvInterval.prototype.getHtml = function() {
    var c, cc, newTable, _i, _len, _ref;
    newTable = $("<table>").attr("class", "adl");
    _ref = this.interval;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      c = _ref[_i];
      cc = conceptBuilder(c);
      newTable.append(cc.getHtml());
    }
    return DvInterval.__super__.getHtml.apply(this, arguments).append($("<td>").append(newTable));
  };

  return DvInterval;

})(Concept);

DvProportion = (function(_super) {

  __extends(DvProportion, _super);

  function DvProportion(json) {
    DvProportion.__super__.constructor.call(this, json);
    this.minNum = json.minNum;
    this.maxNum = json.maxNum;
    this.minDen = json.minDen;
    this.maxDen = json.maxDen;
  }

  DvProportion.prototype.getHtml = function() {
    var den, num;
    this.min = this.minNum;
    this.max = this.maxNum;
    num = this.inputBuilder("0");
    this.min = this.minDen;
    this.max = this.maxNum;
    den = this.inputBuilder("0");
    return DvProportion.__super__.getHtml.apply(this, arguments).append($("<td>").append(num.append(" : ").den));
  };

  return DvProportion;

})(Concept);

DvUri = (function(_super) {

  __extends(DvUri, _super);

  function DvUri(json) {
    DvUri.__super__.constructor.call(this, json);
  }

  DvUri.prototype.getHtml = function() {
    return DvUri.__super__.getHtml.apply(this, arguments).append($("<td>").append(this.inputBuilder("input", "url").attr("placeholder", "URL")));
  };

  return DvUri;

})(Concept);

DvAny = (function(_super) {

  __extends(DvAny, _super);

  function DvAny(json) {
    DvAny.__super__.constructor.call(this, json);
  }

  DvAny.prototype.getHtml = function() {
    return DvAny.__super__.getHtml.apply(this, arguments).append($("<td>").append("<span class=\"any\">[Any]<span>"));
  };

  return DvAny;

})(Concept);

DvCluster = (function(_super) {

  __extends(DvCluster, _super);

  function DvCluster(json) {
    DvCluster.__super__.constructor.call(this, json);
    this.cluster = json.cluster;
  }

  DvCluster.prototype.getHtml = function() {
    var c, cc, newTable, _i, _len, _ref;
    newTable = $("<table>").attr("class", "adl2");
    _ref = this.cluster;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      c = _ref[_i];
      cc = conceptBuilder(c);
      newTable.append(cc.getHtml());
    }
    return DvCluster.__super__.getHtml.apply(this, arguments).append($("<td>").append(newTable));
  };

  return DvCluster;

})(Concept);

DvMultipleElements = (function(_super) {

  __extends(DvMultipleElements, _super);

  function DvMultipleElements(json) {
    DvMultipleElements.__super__.constructor.call(this, json);
    this.elements = json.elements;
  }

  DvMultipleElements.prototype.getHtml = function() {
    var c, cc, newTable, _i, _len, _ref;
    newTable = $("<table>").attr("class", "adl2");
    _ref = this.elements;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      c = _ref[_i];
      cc = conceptBuilder(c._2);
      newTable.append(cc.getHtml());
    }
    return DvMultipleElements.__super__.getHtml.apply(this, arguments).append($("<td>").append(newTable));
  };

  return DvMultipleElements;

})(Concept);
